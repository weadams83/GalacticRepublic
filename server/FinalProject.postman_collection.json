{
	"info": {
		"_postman_id": "85747e5e-c4fd-4b5f-8926-482b864d3ce7",
		"name": "FinalProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Endpoints",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Get User\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"return all users\", function(){\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"\r",
									"//Finding the length of the Response Array\r",
									"    var length = responseJson.length;\r",
									"    pm.expect(length).to.eq(8);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user (retrieve user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Get User\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/user/Loki",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Loki"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get non-existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to Get non-existent User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Lok' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user/Lok",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Lok"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to Get deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Wunderkind' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user/Wunderkind",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Wunderkind"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful User Login\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"user is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userName).to.eql(\"JP Lobster\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"userName\":\"JP Lobster\",\r\n\t \"password\":\"Money\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"user is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"userName\":\"NoOne\",\r\n\t \"password\":\"Money\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login - user deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"user is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Stanley0689' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"userName\":\"Stanley0689\",\r\n\t \"password\":\"Money\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login - bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful User Login\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"user is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"userName\":\"JP Lobster\",\r\n\t \"password\":\"Incorrect password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Post User\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"userRole is Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userName).to.eql(\"Breeduss\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"createUser\":{\r\n        \"userName\":\"Breeduss\",\r\n        \"firstName\":\"Nathan\",\r\n        \"lastName\":\"Breedlove\",\r\n        \"password\":\"Nada\"\r\n    },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User - userName already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to post user with existing userName\", function(){\r",
									"    pm.response.to.have.status(226);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User name: 'Darth Shrewt' is taken.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"createUser\":{\r\n        \"userName\":\"Darth Shrewt\",\r\n        \"firstName\":\"Nathan\",\r\n        \"lastName\":\"Breedlove\",\r\n        \"password\":\"Nada\"\r\n    },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User- user was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reactivate deleted user\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"IsDeleted false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isDeleted).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"createUser\":{\r\n        \"userName\":\"Wunderkind\",\r\n        \"firstName\":\"Nathan\",\r\n        \"lastName\":\"Breedlove\",\r\n        \"password\":\"Nada\"\r\n    },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User (edit user info)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch User\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"pm.test(\"userName changed to Squiddy\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userName).to.eql(\"Squiddy\");\r",
									"});\r",
									"pm.test(\"firstName changed to Kraken\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Kraken\");\r",
									"});\r",
									"\r",
									"pm.test(\"lastName changed to Unleashed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Unleashed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Captain Magma\",\r\n         \"password\":\"Clarinet\"\r\n     },\r\n     \"newData\":{\r\n        \"userName\" : \"Squiddy\",\r\n\r\n        \"firstName\" : \"Kraken\",\r\n\r\n        \"lastName\" : \"Unleashed\",\r\n\r\n        \"password\" : \"SoldierBoy\"\r\n     }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Captain Magma",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Captain Magma"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User (edit user info, user doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to Get non-existent User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Captain Magma\",\r\n         \"password\":\"Clarinet\"\r\n     },\r\n     \"newData\":{\r\n        \"userName\" : \"Squiddy\",\r\n\r\n        \"firstName\" : \"Kraken\",\r\n\r\n        \"lastName\" : \"Unleashed\",\r\n\r\n        \"password\" : \"SoldierBoy\"\r\n     }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User (edit user info, user is deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to Get deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Stanley0689' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Stanley0689\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"newData\":{\r\n        \"userName\" : \"StanTheMan\",\r\n\r\n        \"firstName\" : \"Boss.\",\r\n\r\n        \"lastName\" : \"Stan\",\r\n\r\n        \"password\" : \"MakeItRain\"\r\n     }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Stanley0689",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Stanley0689"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User (edit user info, wrong username credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed authentication\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"IncorrectUsername\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"newData\":{\r\n        \"userName\" : \"Lobster\",\r\n\r\n        \"firstName\" : \"Mrs.\",\r\n\r\n        \"lastName\" : \"Krabby\",\r\n\r\n        \"password\" : \"SoldierBoy\"\r\n     }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/JP Lobster",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"JP Lobster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User (edit user info, wrong password credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed authentication\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"IncorrectPassword\"\r\n     },\r\n     \"newData\":{\r\n        \"userName\" : \"Lobster\",\r\n\r\n        \"firstName\" : \"Mrs.\",\r\n\r\n        \"lastName\" : \"Krabby\",\r\n\r\n        \"password\" : \"SoldierBoy\"\r\n     }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/JP Lobster",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"JP Lobster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to role\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"\r",
									"pm.test(\"Kgurl now has role Member\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userRole.roleTitle).to.eql(\"Member\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Kgurl/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Kgurl",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - boss works at diff company than user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't assign\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Boss with user name: 'JP Lobster can not assign user with user name: 'Kgurl' as they work for different companies.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Kgurl/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Kgurl",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - boss is new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boss is new User\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Kgurl now has role Member\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"StepBro\",\r\n         \"password\":\"Elf\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Kgurl/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Kgurl",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/GD/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"GD",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - boss doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boss doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"NoOne\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - boss has wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boss has wrong credentials\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"WrongPassword\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - boss is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boss is deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"GD\",\r\n         \"password\":\"Sugar\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Role - role doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Role doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Role with name: 'Doesn't exist' not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"roleName\":\"Doesn't exist\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Kgurl/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Kgurl",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.userName).to.eql(\"Darth Shrewt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - boss is new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"StepBro\",\r\n         \"password\":\"Elf\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Project- boss works at diff company than user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't assign\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Boss with user name: 'JP Lobster can not assign user with user name: 'Kgurl' as they work for different companies.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"roleName\":\"Member\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Kgurl/role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Kgurl",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - user hasn't been assigned role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/StepBro/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"StepBro",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign non-existent User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Darth Shrewt\",\r\n         \"password\":\"Beets\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Stanley0689' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Darth Shrewt\",\r\n         \"password\":\"Beets\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Stanley0689/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Stanley0689",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - company user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"NoOne\",\r\n         \"password\":\"Beets\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - company user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user is deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"GD\",\r\n         \"password\":\"Sugar\"\r\n     },\r\n     \"projectName\":\"Count ma money!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - user does not have role with authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign User, no authorization\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Loki' does not have authorization.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Loki\",\r\n         \"password\":\"Pranks\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - company user incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to assign user, incorrect password\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql('Username/Password do not match.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"IncorrectPassword\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - project does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"failed to assign user, project does not exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Project with name: 'NonExistentProject' not found or deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"NonExistentProject\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - project is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to assign user, project is deleted.\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Project with name: 'Have fun at the office.' not found or deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"Have fun at the office.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned user to company\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"\r",
									"pm.test(\"Breeduss added as user for Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userCompany.companyName).to.eql(\"Krusty Krab\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"JP Lobster\",\r\n         \"password\":\"Money\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company - boss is new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"StepBro\",\r\n         \"password\":\"Elf\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign non-existent User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Breeduss\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company- user hasn't been assigned role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/StepBro/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"StepBro",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company- user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Breeduss\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/GD/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"GD",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company - company user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"NoOne\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company- company user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user is deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"GD\",\r\n         \"password\":\"Sugar\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company- user does not have role with authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign User, no authorization\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Loki' does not have authorization.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Loki\",\r\n         \"password\":\"Pranks\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company - company user incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to assign user, incorrect password\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql( 'Username/Password do not match.' );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"IncorrectPassword\"\r\n     },\r\n     \"companyName\":\"Krusty Krab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Company- company does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"failed to assign user, company does not exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Company with name: 'NonExistentCompany' not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"companyName\":\"NonExistentCompany\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User to Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to team\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"\r",
									"pm.test(\"Kgurl added as user for Team\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.associatedTeam.teamName).to.eql(\"Accounting\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"teamName\":\"Accounting\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Loki/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Loki",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team - boss is new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"StepBro\",\r\n         \"password\":\"Elf\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Project - user hasn't been assigned role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful assigned User to project\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Darth Schrewt added as user for Project\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'StepBro' has not been assigned a Role.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"projectName\":\"Count Paper\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/StepBro/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"StepBro",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign non-existent User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Breeduss\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"teamName\":\"Service Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Breeduss\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"teamName\":\"Service Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/GD/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"GD",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- company user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user doesn't exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"NoOne\",\r\n         \"password\":\"Nada\"\r\n     },\r\n     \"teamName\":\"Service Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- company user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign user, authorized user is deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'GD' could not be found or has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"GD\",\r\n         \"password\":\"Sugar\"\r\n     },\r\n     \"teamName\":\"Service Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/The Quickster/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"The Quickster",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- user does not have role with authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to assign User, no authorization\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Loki' does not have authorization.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Loki\",\r\n         \"password\":\"Pranks\"\r\n     },\r\n     \"teamName\":\"Accounting\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- company user incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to assign user, incorrect password\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql( 'Username/Password do not match.' );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"IncorrectPassword\"\r\n     },\r\n     \"teamName\":\"Accounting\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- team does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"failed to assign user, team does not exist\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Team with name: 'NonExistentTeam' not found or deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"teamName\":\"NonExistentTeam\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user to Team- team is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to assign user, team is deleted.\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Team with name: 'Crossfit' not found or deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"credentials\":{\r\n         \"userName\":\"Michael Scarn\",\r\n         \"password\":\"Friendship\"\r\n     },\r\n     \"teamName\":\"Crossfit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt/team",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Delete User\", function(){\r",
									"    pm.response.to.have.status(202);\r",
									"})\r",
									"pm.test(\"isDeleted set to true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isDeleted).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\t\r\n    \"userName\":\"Darth Shrewt\",\r\n\t\"password\":\"Beets\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Darth Shrewt",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Darth Shrewt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - user already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User already deleted\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'Stanley0689' could not be found or has been deleted.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\t\r\n    \"userName\":\"Stanley0689\",\r\n\t\"password\":\"Money\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/Stanley0689",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"Stanley0689"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - user doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to Get deleted User\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User with user name: 'NoOne' could not be found or has been deleted.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\t\r\n    \"userName\":\"Breeduss\",\r\n\t\"password\":\"Nada\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/NoOne",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"NoOne"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - incorrect username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed authentication\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\t\r\n    \"userName\":\"IncorrectUsername\",\r\n\t\"password\":\"Money\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/JP Lobster",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"JP Lobster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed authentication\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"message displayed correctly\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Username/Password do not match.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\t\r\n    \"userName\":\"JP Lobster\",\r\n\t\"password\":\"IncorrectPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/user/JP Lobster",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"JP Lobster"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company Endpoints",
			"item": [
				{
					"name": "Create new Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.companyName).to.eql(\"Umbrella Corp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seedCompany\":{\r\n        \"companyName\":\"Umbrella Corp\",\r\n        \"companyDescription\":\"Zombies\"\r\n    },\r\n    \"seedUser\":{\r\n        \"userName\":\"Head Guy\",\r\n        \"password\":\"Scientist\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Company - name already taken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 226\", function () {\r",
									"    pm.response.to.have.status(226);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Company with company name: 'Dunder Mifflin' already exsist.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seedCompany\":{\r\n        \"companyName\":\"Dunder Mifflin\",\r\n        \"companyDescription\":\"Zombies\"\r\n    },\r\n    \"seedUser\":{\r\n        \"userName\":\"Head Guy\",\r\n        \"password\":\"Scientist\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"company"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}